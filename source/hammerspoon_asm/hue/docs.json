[
  {
    "Constant" : [
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.",
          "",
          "This table is initially empty until [hs._asm.hue.beginDiscovery](#beginDiscovery) has been executed.  If you have a default defined with [hs._asm.hue.setDefault](#setDefault), then this process will occur automatically when the module is loaded.",
          "",
          "The keys represent the bridge ID's of Hue bridges discovered and the value will be a table containing the name of the bridge, the time it last responded to a discovery query, and the root URL to use for queries.  A __tostring metatable method has been added so you can view the table in the console by just referencing this variable."
        ],
        "desc" : "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.",
        "doc" : "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.\n\nThis table is initially empty until [hs._asm.hue.beginDiscovery](#beginDiscovery) has been executed.  If you have a default defined with [hs._asm.hue.setDefault](#setDefault), then this process will occur automatically when the module is loaded.\n\nThe keys represent the bridge ID's of Hue bridges discovered and the value will be a table containing the name of the bridge, the time it last responded to a discovery query, and the root URL to use for queries.  A __tostring metatable method has been added so you can view the table in the console by just referencing this variable.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.discovered",
        "type" : "Constant",
        "returns" : [

        ],
        "def" : "hs._asm.hue.discovered",
        "name" : "discovered"
      }
    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "parameters" : [
          " * queryTime - the number of seconds, default 3.0, to query for bridges on the local network.",
          " * callback   - an optional function to execute after the query has completed.  Defaults to an empty function.",
          ""
        ],
        "stripped_doc" : [
          "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.",
          ""
        ],
        "desc" : "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.",
        "doc" : "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.\n\nParameters:\n * queryTime - the number of seconds, default 3.0, to query for bridges on the local network.\n * callback   - an optional function to execute after the query has completed.  Defaults to an empty function.\n\nReturns:\n * None\n\nNotes:\n * This function will clear current entries in [hs._asm.hue.discovered](#discovered) before performing the query and then populate it with bridges discovered on the current local networks.",
        "notes" : [
          " * This function will clear current entries in [hs._asm.hue.discovered](#discovered) before performing the query and then populate it with bridges discovered on the current local networks."
        ],
        "signature" : "hs._asm.hue.beginDiscovery([queryTime], [callback]) -> none",
        "type" : "Function",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "hs._asm.hue.beginDiscovery([queryTime], [callback]) -> none",
        "name" : "beginDiscovery"
      },
      {
        "parameters" : [
          " * bridgeID - a string (or explicit nil if you wish to remove the current default) specifying the bridge id of the bridge to connect to by default. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string (or explicit nil if you wish to remove the current default) specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).",
          " * force    - an optional boolean, default false, specifying if an existing default should be replaced by the new values.",
          ""
        ],
        "stripped_doc" : [
          "Set or clear the default bridge and user used for automatic connection when this module loads.",
          ""
        ],
        "desc" : "Set or clear the default bridge and user used for automatic connection when this module loads.",
        "doc" : "Set or clear the default bridge and user used for automatic connection when this module loads.\n\nParameters:\n * bridgeID - a string (or explicit nil if you wish to remove the current default) specifying the bridge id of the bridge to connect to by default. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string (or explicit nil if you wish to remove the current default) specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).\n * force    - an optional boolean, default false, specifying if an existing default should be replaced by the new values.\n\nReturns:\n * true if the new settings have been saved or false if they were not.\n\nNotes:\n * If a default is set then this module will automatically discover available bridges when loaded and connect to the specified bridge if it is available. See [hs._asm.hue.default](#default).\n * On a successful change, [hs._asm.hue.default](#default) will be reset to reflect the new defaults.\n\n * See also [hs._asm.hue:makeDefault](#makeDefault).",
        "notes" : [
          " * If a default is set then this module will automatically discover available bridges when loaded and connect to the specified bridge if it is available. See [hs._asm.hue.default](#default).",
          " * On a successful change, [hs._asm.hue.default](#default) will be reset to reflect the new defaults.",
          "",
          " * See also [hs._asm.hue:makeDefault](#makeDefault)."
        ],
        "signature" : "hs._asm.hue.setDefault(bridgeID, userID, [force]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * true if the new settings have been saved or false if they were not.",
          ""
        ],
        "def" : "hs._asm.hue.setDefault(bridgeID, userID, [force]) -> boolean",
        "name" : "setDefault"
      },
      {
        "parameters" : [
          " * bridgeID - a string specifying the id of the discovered bridge on which you wish to create a new user. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string specifying a human readable name for the new user identification string",
          ""
        ],
        "stripped_doc" : [
          "Attempts to create a new user ID on the specified Philips Hue bridge",
          ""
        ],
        "desc" : "Attempts to create a new user ID on the specified Philips Hue bridge",
        "doc" : "Attempts to create a new user ID on the specified Philips Hue bridge\n\nParameters:\n * bridgeID - a string specifying the id of the discovered bridge on which you wish to create a new user. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string specifying a human readable name for the new user identification string\n\nReturns:\n * a table containing the results of the request.\n   * If the link button on your Philips Hue bridge has not been pressed, the table will contain the following:\n ~~~\n{ {\n    error = {\n      address = \"\/\",\n      description = \"link button not pressed\",\n      type = 101\n    }\n  } }\n~~~\n   * If you have pressed the link button and issue this function within 30 seconds, the table will contain the following:\n ~~~\n{ {\n    success = {\n      username = \"string-contaning-letters-and-numbers\"\n    }\n  } }\n~~~\n   * Note the value of `username` as you will need it for [hs._asm.hue.connect](#connect)\n\nNotes:\n * The Philips Hue bridge does not support usernames directly; instead, you must specify an application name and a device or user for that application which are used to construct a unique hashed value in your bridge which is added to its whitelist. Internally this function prepends \"hammerspoon\" as the application name, so you only provide the user portion. The returned hash is how you authenticate yourself for future communication with the bridge.\n\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The Philips Hue bridge does not support usernames directly; instead, you must specify an application name and a device or user for that application which are used to construct a unique hashed value in your bridge which is added to its whitelist. Internally this function prepends \"hammerspoon\" as the application name, so you only provide the user portion. The returned hash is how you authenticate yourself for future communication with the bridge.",
          "",
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue.createUser(bridgeID, userName) -> results",
        "type" : "Function",
        "returns" : [
          " * a table containing the results of the request.",
          "   * If the link button on your Philips Hue bridge has not been pressed, the table will contain the following:",
          " ~~~",
          "{ {",
          "    error = {",
          "      address = \"\/\",",
          "      description = \"link button not pressed\",",
          "      type = 101",
          "    }",
          "  } }",
          "~~~",
          "   * If you have pressed the link button and issue this function within 30 seconds, the table will contain the following:",
          " ~~~",
          "{ {",
          "    success = {",
          "      username = \"string-contaning-letters-and-numbers\"",
          "    }",
          "  } }",
          "~~~",
          "   * Note the value of `username` as you will need it for [hs._asm.hue.connect](#connect)",
          ""
        ],
        "def" : "hs._asm.hue.createUser(bridgeID, userName) -> results",
        "name" : "createUser"
      },
      {
        "parameters" : [
          " * color - a table specifying a color as defined by the `hs.drawing.color` module",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.",
          ""
        ],
        "desc" : "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.",
        "doc" : "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.\n\nParameters:\n * color - a table specifying a color as defined by the `hs.drawing.color` module\n\nReturns:\n * a table containing the `hue`, `sat`, and `bri` key-value pairs recognizable by the Philips Hue bridge representing the color specified. If no conversion is possible, returns an empty table, which if provided to the bridge, will result in no change.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.hueColor(color) -> table",
        "type" : "Function",
        "returns" : [
          " * a table containing the `hue`, `sat`, and `bri` key-value pairs recognizable by the Philips Hue bridge representing the color specified. If no conversion is possible, returns an empty table, which if provided to the bridge, will result in no change."
        ],
        "def" : "hs._asm.hue.hueColor(color) -> table",
        "name" : "hueColor"
      }
    ],
    "Variable" : [
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).",
          "",
          "If you have not set a default, or if the default is not available when this module is first loaded, this value will be nil. If you change the default with [hs._asm.hue.setDefault](#setDefault) then this value will be set to nil and a connection attempt to the new bridge will be attempted.  On success, this variable will then contain the hueObject for the new connection."
        ],
        "desc" : "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).",
        "doc" : "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).\n\nIf you have not set a default, or if the default is not available when this module is first loaded, this value will be nil. If you change the default with [hs._asm.hue.setDefault](#setDefault) then this value will be set to nil and a connection attempt to the new bridge will be attempted.  On success, this variable will then contain the hueObject for the new connection.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.default",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.default",
        "name" : "default"
      },
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "hs.logger object used within this module."
        ],
        "desc" : "hs.logger object used within this module.",
        "doc" : "hs.logger object used within this module.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.log",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.log",
        "name" : "log"
      },
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.",
          "",
          "To effect a persistent change to this value, set your desired timeout with `hs.settings.set(\"hs._asm.hue.defaultRetryTime\", value)`."
        ],
        "desc" : "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.",
        "doc" : "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.\n\nTo effect a persistent change to this value, set your desired timeout with `hs.settings.set(\"hs._asm.hue.defaultRetryTime\", value)`.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.defaultRetryTime",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.defaultRetryTime",
        "name" : "defaultRetryTime"
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "Manage Philips Hue Hubs on your local network.",
    "Constructor" : [
      {
        "parameters" : [
          " * bridgeID - a string specifying the bridge id of the bridge to connect to. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).",
          ""
        ],
        "stripped_doc" : [
          "Connect to the specified Hue bridge with the specified user hash.",
          ""
        ],
        "desc" : "Connect to the specified Hue bridge with the specified user hash.",
        "doc" : "Connect to the specified Hue bridge with the specified user hash.\n\nParameters:\n * bridgeID - a string specifying the bridge id of the bridge to connect to. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).\n\nReturns:\n * the hueObject if the bridge is available or nil if it is not\n\nNotes:\n * if you have set a default with [hs._asm.hue.setDefault](#setDefault) then a connection will be attempted automatically when this module is loaded. See [hs._asm.hue.default](#default).",
        "notes" : [
          " * if you have set a default with [hs._asm.hue.setDefault](#setDefault) then a connection will be attempted automatically when this module is loaded. See [hs._asm.hue.default](#default)."
        ],
        "signature" : "hs._asm.hue.connect(bridgeID, userID) -> hueObject",
        "type" : "Constructor",
        "returns" : [
          " * the hueObject if the bridge is available or nil if it is not",
          ""
        ],
        "def" : "hs._asm.hue.connect(bridgeID, userID) -> hueObject",
        "name" : "connect"
      }
    ],
    "Field" : [

    ],
    "Method" : [
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          ""
        ],
        "stripped_doc" : [
          "Sends a GET query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a GET query to the Hue bridge using its REST API.",
        "doc" : "Sends a GET query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:get(queryString) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:get(queryString) -> table",
        "name" : "get"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          ""
        ],
        "stripped_doc" : [
          "Sends a DELETE query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a DELETE query to the Hue bridge using its REST API.",
        "doc" : "Sends a DELETE query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:delete(queryString) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:delete(queryString) -> table",
        "name" : "delete"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          " * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil",
          ""
        ],
        "stripped_doc" : [
          "Sends a PUT query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a PUT query to the Hue bridge using its REST API.",
        "doc" : "Sends a PUT query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:put(queryString, body) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:put(queryString, body) -> table",
        "name" : "put"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          " * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil",
          ""
        ],
        "stripped_doc" : [
          "Sends a POST query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a POST query to the Hue bridge using its REST API.",
        "doc" : "Sends a POST query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:post(queryString, body) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:post(queryString, body) -> table",
        "name" : "post"
      },
      {
        "parameters" : [
          " * force - an optional boolean, default false, specifying whether or not this connection should overwrite any existing default connection.",
          ""
        ],
        "stripped_doc" : [
          "Set this current connection as the module's default connection to be attempted on module load.",
          ""
        ],
        "desc" : "Set this current connection as the module's default connection to be attempted on module load.",
        "doc" : "Set this current connection as the module's default connection to be attempted on module load.\n\nParameters:\n * force - an optional boolean, default false, specifying whether or not this connection should overwrite any existing default connection.\n\nReturns:\n * true if the change was successful or false if it was not\n\nNotes:\n * This is a wrapper for [hs._asm.hue.setDefault](#setDefault) providing the bridgeID and userID from this connection.  It's return value and behavior are described in the documentation for `setDefault`.",
        "notes" : [
          " * This is a wrapper for [hs._asm.hue.setDefault](#setDefault) providing the bridgeID and userID from this connection.  It's return value and behavior are described in the documentation for `setDefault`."
        ],
        "signature" : "hs._asm.hue:makeDefault([force]) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the change was successful or false if it was not",
          ""
        ],
        "def" : "hs._asm.hue:makeDefault([force]) -> boolean",
        "name" : "makeDefault"
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.",
          "",
          "This table is initially empty until [hs._asm.hue.beginDiscovery](#beginDiscovery) has been executed.  If you have a default defined with [hs._asm.hue.setDefault](#setDefault), then this process will occur automatically when the module is loaded.",
          "",
          "The keys represent the bridge ID's of Hue bridges discovered and the value will be a table containing the name of the bridge, the time it last responded to a discovery query, and the root URL to use for queries.  A __tostring metatable method has been added so you can view the table in the console by just referencing this variable."
        ],
        "desc" : "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.",
        "doc" : "A table containing key-value pairs for the Philips Hue bridges discovered on the current network by this module.\n\nThis table is initially empty until [hs._asm.hue.beginDiscovery](#beginDiscovery) has been executed.  If you have a default defined with [hs._asm.hue.setDefault](#setDefault), then this process will occur automatically when the module is loaded.\n\nThe keys represent the bridge ID's of Hue bridges discovered and the value will be a table containing the name of the bridge, the time it last responded to a discovery query, and the root URL to use for queries.  A __tostring metatable method has been added so you can view the table in the console by just referencing this variable.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.discovered",
        "type" : "Constant",
        "returns" : [

        ],
        "def" : "hs._asm.hue.discovered",
        "name" : "discovered"
      },
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).",
          "",
          "If you have not set a default, or if the default is not available when this module is first loaded, this value will be nil. If you change the default with [hs._asm.hue.setDefault](#setDefault) then this value will be set to nil and a connection attempt to the new bridge will be attempted.  On success, this variable will then contain the hueObject for the new connection."
        ],
        "desc" : "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).",
        "doc" : "The hueObject representing the default bridge connection set by [hs._asm.hue.setDefault](#setDefault).\n\nIf you have not set a default, or if the default is not available when this module is first loaded, this value will be nil. If you change the default with [hs._asm.hue.setDefault](#setDefault) then this value will be set to nil and a connection attempt to the new bridge will be attempted.  On success, this variable will then contain the hueObject for the new connection.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.default",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.default",
        "name" : "default"
      },
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.",
          "",
          "To effect a persistent change to this value, set your desired timeout with `hs.settings.set(\"hs._asm.hue.defaultRetryTime\", value)`."
        ],
        "desc" : "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.",
        "doc" : "The retry interval when a default is set with [hs._asm.hue.setDefault](#setDefault) but the specified bridge was not discovered.  Defaults to 60 seconds.\n\nTo effect a persistent change to this value, set your desired timeout with `hs.settings.set(\"hs._asm.hue.defaultRetryTime\", value)`.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.defaultRetryTime",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.defaultRetryTime",
        "name" : "defaultRetryTime"
      },
      {
        "parameters" : [

        ],
        "stripped_doc" : [
          "hs.logger object used within this module."
        ],
        "desc" : "hs.logger object used within this module.",
        "doc" : "hs.logger object used within this module.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.log",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "hs._asm.hue.log",
        "name" : "log"
      },
      {
        "parameters" : [
          " * queryTime - the number of seconds, default 3.0, to query for bridges on the local network.",
          " * callback   - an optional function to execute after the query has completed.  Defaults to an empty function.",
          ""
        ],
        "stripped_doc" : [
          "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.",
          ""
        ],
        "desc" : "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.",
        "doc" : "Perform an SSDP M-SEARCH query to discover Philips Hue bridges on the current network.\n\nParameters:\n * queryTime - the number of seconds, default 3.0, to query for bridges on the local network.\n * callback   - an optional function to execute after the query has completed.  Defaults to an empty function.\n\nReturns:\n * None\n\nNotes:\n * This function will clear current entries in [hs._asm.hue.discovered](#discovered) before performing the query and then populate it with bridges discovered on the current local networks.",
        "notes" : [
          " * This function will clear current entries in [hs._asm.hue.discovered](#discovered) before performing the query and then populate it with bridges discovered on the current local networks."
        ],
        "signature" : "hs._asm.hue.beginDiscovery([queryTime], [callback]) -> none",
        "type" : "Function",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "hs._asm.hue.beginDiscovery([queryTime], [callback]) -> none",
        "name" : "beginDiscovery"
      },
      {
        "parameters" : [
          " * bridgeID - a string specifying the id of the discovered bridge on which you wish to create a new user. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string specifying a human readable name for the new user identification string",
          ""
        ],
        "stripped_doc" : [
          "Attempts to create a new user ID on the specified Philips Hue bridge",
          ""
        ],
        "desc" : "Attempts to create a new user ID on the specified Philips Hue bridge",
        "doc" : "Attempts to create a new user ID on the specified Philips Hue bridge\n\nParameters:\n * bridgeID - a string specifying the id of the discovered bridge on which you wish to create a new user. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string specifying a human readable name for the new user identification string\n\nReturns:\n * a table containing the results of the request.\n   * If the link button on your Philips Hue bridge has not been pressed, the table will contain the following:\n ~~~\n{ {\n    error = {\n      address = \"\/\",\n      description = \"link button not pressed\",\n      type = 101\n    }\n  } }\n~~~\n   * If you have pressed the link button and issue this function within 30 seconds, the table will contain the following:\n ~~~\n{ {\n    success = {\n      username = \"string-contaning-letters-and-numbers\"\n    }\n  } }\n~~~\n   * Note the value of `username` as you will need it for [hs._asm.hue.connect](#connect)\n\nNotes:\n * The Philips Hue bridge does not support usernames directly; instead, you must specify an application name and a device or user for that application which are used to construct a unique hashed value in your bridge which is added to its whitelist. Internally this function prepends \"hammerspoon\" as the application name, so you only provide the user portion. The returned hash is how you authenticate yourself for future communication with the bridge.\n\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The Philips Hue bridge does not support usernames directly; instead, you must specify an application name and a device or user for that application which are used to construct a unique hashed value in your bridge which is added to its whitelist. Internally this function prepends \"hammerspoon\" as the application name, so you only provide the user portion. The returned hash is how you authenticate yourself for future communication with the bridge.",
          "",
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue.createUser(bridgeID, userName) -> results",
        "type" : "Function",
        "returns" : [
          " * a table containing the results of the request.",
          "   * If the link button on your Philips Hue bridge has not been pressed, the table will contain the following:",
          " ~~~",
          "{ {",
          "    error = {",
          "      address = \"\/\",",
          "      description = \"link button not pressed\",",
          "      type = 101",
          "    }",
          "  } }",
          "~~~",
          "   * If you have pressed the link button and issue this function within 30 seconds, the table will contain the following:",
          " ~~~",
          "{ {",
          "    success = {",
          "      username = \"string-contaning-letters-and-numbers\"",
          "    }",
          "  } }",
          "~~~",
          "   * Note the value of `username` as you will need it for [hs._asm.hue.connect](#connect)",
          ""
        ],
        "def" : "hs._asm.hue.createUser(bridgeID, userName) -> results",
        "name" : "createUser"
      },
      {
        "parameters" : [
          " * color - a table specifying a color as defined by the `hs.drawing.color` module",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.",
          ""
        ],
        "desc" : "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.",
        "doc" : "Returns a table containing the hue, sat, and bri properties recognizable by the Philips Hue bridge representing the color specified.\n\nParameters:\n * color - a table specifying a color as defined by the `hs.drawing.color` module\n\nReturns:\n * a table containing the `hue`, `sat`, and `bri` key-value pairs recognizable by the Philips Hue bridge representing the color specified. If no conversion is possible, returns an empty table, which if provided to the bridge, will result in no change.",
        "notes" : [

        ],
        "signature" : "hs._asm.hue.hueColor(color) -> table",
        "type" : "Function",
        "returns" : [
          " * a table containing the `hue`, `sat`, and `bri` key-value pairs recognizable by the Philips Hue bridge representing the color specified. If no conversion is possible, returns an empty table, which if provided to the bridge, will result in no change."
        ],
        "def" : "hs._asm.hue.hueColor(color) -> table",
        "name" : "hueColor"
      },
      {
        "parameters" : [
          " * bridgeID - a string (or explicit nil if you wish to remove the current default) specifying the bridge id of the bridge to connect to by default. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string (or explicit nil if you wish to remove the current default) specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).",
          " * force    - an optional boolean, default false, specifying if an existing default should be replaced by the new values.",
          ""
        ],
        "stripped_doc" : [
          "Set or clear the default bridge and user used for automatic connection when this module loads.",
          ""
        ],
        "desc" : "Set or clear the default bridge and user used for automatic connection when this module loads.",
        "doc" : "Set or clear the default bridge and user used for automatic connection when this module loads.\n\nParameters:\n * bridgeID - a string (or explicit nil if you wish to remove the current default) specifying the bridge id of the bridge to connect to by default. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string (or explicit nil if you wish to remove the current default) specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).\n * force    - an optional boolean, default false, specifying if an existing default should be replaced by the new values.\n\nReturns:\n * true if the new settings have been saved or false if they were not.\n\nNotes:\n * If a default is set then this module will automatically discover available bridges when loaded and connect to the specified bridge if it is available. See [hs._asm.hue.default](#default).\n * On a successful change, [hs._asm.hue.default](#default) will be reset to reflect the new defaults.\n\n * See also [hs._asm.hue:makeDefault](#makeDefault).",
        "notes" : [
          " * If a default is set then this module will automatically discover available bridges when loaded and connect to the specified bridge if it is available. See [hs._asm.hue.default](#default).",
          " * On a successful change, [hs._asm.hue.default](#default) will be reset to reflect the new defaults.",
          "",
          " * See also [hs._asm.hue:makeDefault](#makeDefault)."
        ],
        "signature" : "hs._asm.hue.setDefault(bridgeID, userID, [force]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * true if the new settings have been saved or false if they were not.",
          ""
        ],
        "def" : "hs._asm.hue.setDefault(bridgeID, userID, [force]) -> boolean",
        "name" : "setDefault"
      },
      {
        "parameters" : [
          " * bridgeID - a string specifying the bridge id of the bridge to connect to. See [hs._asm.hue.discovered](#discovered).",
          " * userID   - a string specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).",
          ""
        ],
        "stripped_doc" : [
          "Connect to the specified Hue bridge with the specified user hash.",
          ""
        ],
        "desc" : "Connect to the specified Hue bridge with the specified user hash.",
        "doc" : "Connect to the specified Hue bridge with the specified user hash.\n\nParameters:\n * bridgeID - a string specifying the bridge id of the bridge to connect to. See [hs._asm.hue.discovered](#discovered).\n * userID   - a string specifying the user hash as provided by [hs._asm.hue.createUser](#createUser).\n\nReturns:\n * the hueObject if the bridge is available or nil if it is not\n\nNotes:\n * if you have set a default with [hs._asm.hue.setDefault](#setDefault) then a connection will be attempted automatically when this module is loaded. See [hs._asm.hue.default](#default).",
        "notes" : [
          " * if you have set a default with [hs._asm.hue.setDefault](#setDefault) then a connection will be attempted automatically when this module is loaded. See [hs._asm.hue.default](#default)."
        ],
        "signature" : "hs._asm.hue.connect(bridgeID, userID) -> hueObject",
        "type" : "Constructor",
        "returns" : [
          " * the hueObject if the bridge is available or nil if it is not",
          ""
        ],
        "def" : "hs._asm.hue.connect(bridgeID, userID) -> hueObject",
        "name" : "connect"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          ""
        ],
        "stripped_doc" : [
          "Sends a DELETE query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a DELETE query to the Hue bridge using its REST API.",
        "doc" : "Sends a DELETE query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:delete(queryString) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:delete(queryString) -> table",
        "name" : "delete"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          ""
        ],
        "stripped_doc" : [
          "Sends a GET query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a GET query to the Hue bridge using its REST API.",
        "doc" : "Sends a GET query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:get(queryString) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:get(queryString) -> table",
        "name" : "get"
      },
      {
        "parameters" : [
          " * force - an optional boolean, default false, specifying whether or not this connection should overwrite any existing default connection.",
          ""
        ],
        "stripped_doc" : [
          "Set this current connection as the module's default connection to be attempted on module load.",
          ""
        ],
        "desc" : "Set this current connection as the module's default connection to be attempted on module load.",
        "doc" : "Set this current connection as the module's default connection to be attempted on module load.\n\nParameters:\n * force - an optional boolean, default false, specifying whether or not this connection should overwrite any existing default connection.\n\nReturns:\n * true if the change was successful or false if it was not\n\nNotes:\n * This is a wrapper for [hs._asm.hue.setDefault](#setDefault) providing the bridgeID and userID from this connection.  It's return value and behavior are described in the documentation for `setDefault`.",
        "notes" : [
          " * This is a wrapper for [hs._asm.hue.setDefault](#setDefault) providing the bridgeID and userID from this connection.  It's return value and behavior are described in the documentation for `setDefault`."
        ],
        "signature" : "hs._asm.hue:makeDefault([force]) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the change was successful or false if it was not",
          ""
        ],
        "def" : "hs._asm.hue:makeDefault([force]) -> boolean",
        "name" : "makeDefault"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          " * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil",
          ""
        ],
        "stripped_doc" : [
          "Sends a POST query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a POST query to the Hue bridge using its REST API.",
        "doc" : "Sends a POST query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:post(queryString, body) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:post(queryString, body) -> table",
        "name" : "post"
      },
      {
        "parameters" : [
          " * queryString - a string specifying the query for the Hue bridge.",
          " * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil",
          ""
        ],
        "stripped_doc" : [
          "Sends a PUT query to the Hue bridge using its REST API.",
          ""
        ],
        "desc" : "Sends a PUT query to the Hue bridge using its REST API.",
        "doc" : "Sends a PUT query to the Hue bridge using its REST API.\n\nParameters:\n * queryString - a string specifying the query for the Hue bridge.\n * body        - the data for the query.  This should be a string specifying json encoded data, a table which will be converted to json encoded data, or nil\n\nReturns:\n * a table of the decoded json data returned by the Hue bridge in response to this query\n\nNotes:\n * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself.",
        "notes" : [
          " * The table returned uses `hs.inspect` as it's __tostring metamethod; this means that you can issue the command in the Hammerspoon console and see the results without having to capture the return value and viewing it with `hs.inspect` yourself."
        ],
        "signature" : "hs._asm.hue:put(queryString, body) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of the decoded json data returned by the Hue bridge in response to this query",
          ""
        ],
        "def" : "hs._asm.hue:put(queryString, body) -> table",
        "name" : "put"
      }
    ],
    "doc" : "Manage Philips Hue Hubs on your local network.",
    "name" : "hs._asm.hue"
  }
]